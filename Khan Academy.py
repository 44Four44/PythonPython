# -----------------------------------------------------------------------------
# Name:        Khan Academy (python.py)
# Purpose:     To help students improve on their arithmetic skills
#
#
# Author:      Ethan Wang
# Created:     5-Sep-2018
# Updated:     17-Sep-2018
# -----------------------------------------------------------------------------

import random

# List of different praises
praises = ["Wow! You are a natural!", "Your IQ is above 100!", "Immaculate!", "Egregious!", "Delicious!",
           "Albert Einstein would be jealous!", "You have a big brain!", "You would even pass Dunne's class!"]

# List of difficulties
difficulties = ['easy', 'medium', 'hard']

# List of problem types
problem_types = ['addition', 'subtraction', 'multiplication', 'division']

# Greetings
print("\nWelcome to Khan Academy!")

# Current difficulty level
difficulty = difficulties[0]

# Current problem type
problem_type = problem_types[0]


def set_type():
    """
    Sets the type of problem between the 4 arithmetic operators

    Changes the value of the string 'problem_type' to an item in the list 'problem_types'

	Parameters
	----------
	None

	Returns
    -------
	str
	    Returns the input if it is a valid problem type

    """

    setp = input("\nSelect a type of problem: addition, subtraction, multiplication, division\n")
    while setp not in problem_types:
        print("\nThat is not an option!")
        setp = input("Select a type of problem: addition, subtraction, multiplication, division\n")
    return setp


def set_dif():
    """
    Sets the difficulty of the problems

    Changes the value of the string 'difficulty' to an item in the list 'difficulties'

	Parameters
	----------
	None

	Returns
    -------
	str
	    Returns the input if it is a valid difficulty

    """

    setd = input("\nSelect a difficulty: easy, medium, hard\n")
    while setd not in difficulties:
        print("\nThat is not an option!")
        setd = input("Select a difficulty: easy, medium, hard\n")
    return setd


def problem(question, correct_answer):
    """
    Asks a problem and checks for the correct answer of the problem

	Parameters
	----------
	question : str
	    The problem that is to be asked based on the type of problem generated by the functions: 'addition()',
	    'subtraction()', 'multiplication()', and 'division()'
	correct_answer : float
	    The correct answer of the problem

	Returns
    -------
    None

	Raises
	------
	ValueError
	    If the value of increase is not a float and it is trying to convert it into a float

    """

    # Asks the inputted question
    answer = input(question)

    # Checks for difficulty or problem type change
    navigate(answer)

    # List of previous answers for question
    answers = [answer]
    while float(answer) != correct_answer:
        # 1 answer
        if len(answers) == 1:
            print("\n" + answers[0] + " is incorrect!")

        # 2 or more answers
        else:
            # lists previous incorrect answers
            print("\n")
            for i in range(len(answers)):
                if i == len(answers) - 1:
                    print("and " + answers[i], end='')
                else:
                    print(answers[i] + ", ", end='')
            print(" are incorrect!")
        print("Try again.")

        # Next inputted answer
        answer = input(question)

        # Checks for difficulty or problem type change
        navigate(answer)

        # Adds answer to list
        answers.append(answer)

    # Random praise upon getting the correct answer
    print(random.choice(praises))


def addition(dif):
    """
    Generates an addition problem based on the difficulty and generates 2 random integers,
    then asks the problem by calling the function 'problem()'

    Parameters
	----------
	dif : str
	    Placeholder for 'difficulty'

	Returns
    -------
    None

    """

    # Largeness of numbers based on difficulty
    x = random.randint(10 ** (2 * difficulties.index(dif)), 10 ** (2 * difficulties.index(dif) + 2) - 1)
    y = random.randint(10 ** (2 * difficulties.index(dif)), 10 ** (2 * difficulties.index(dif) + 2) - 1)

    problem("\nWhat is " + str(x) + " + " + str(y) + " ?\n", x + y)


def subtraction(dif):
    """
    Generates a subtraction problem based on the difficulty and generates 2 random integers,
    then asks the problem by calling the function 'problem()'

    Parameters
	----------
	dif : str
	    Placeholder for 'difficulty'

	Returns
    -------
    None

    """

    # Largeness of numbers based on difficulty
    if dif == difficulties[0]:
        x = int(random.uniform(0, 99))
        y = x + int(random.uniform(0, 99))
    else:
        x = random.randint(10 ** (2 * difficulties.index(dif)), 10 ** (2 * difficulties.index(dif) + 2) - 1)
        y = random.randint(10 ** (2 * difficulties.index(dif)), 10 ** (2 * difficulties.index(dif) + 2) - 1)

    problem("\nWhat is " + str(y) + " - " + str(x) + " ?\n", y - x)


def multiplication(dif):
    """
    Generates a multiplication problem based on the difficulty and generates 2 random integers,
    then asks the problem by calling the function 'problem()'

    Parameters
	----------
	dif : str
	    Placeholder for 'difficulty'

	Returns
    -------
    None

    """

    # Largeness of numbers based on difficulty
    x = random.randint(10 ** (2 * difficulties.index(dif)), 10 ** (2 * difficulties.index(dif) + 1) - 1)
    y = random.randint(10 ** (2 * difficulties.index(dif)), 10 ** (2 * difficulties.index(dif) + 2) - 1)

    problem("\nWhat is " + str(x) + " * " + str(y) + " ?\n", x * y)


def division(dif):
    """
    Generates a division problem based on the difficulty and generates 2 random integers,
    then asks the problem by calling the function 'problem()'

    Parameters
	----------
	dif : str
	    Placeholder for 'difficulty'

	Returns
    -------
    None

    """

    # Largeness of numbers based on difficulty
    x = random.randint(10 ** (difficulties.index(dif)), 10 ** (difficulties.index(dif) + 1) - 1)
    y = x * random.randint(10 ** (difficulties.index(dif)), 10 ** (difficulties.index(dif) + 1) - 1)

    problem("\nWhat is " + str(y) + " / " + str(x) + " ?\n", y / x)


def ask_type(prob):
    """
    Calls the respective problem generator function based on the string 'problem_type'

    Parameters
	----------
	prob : str
	    Placeholder for 'problem_type'

	Returns
    -------
    None

    """

    if prob == problem_types[0]:
        addition(difficulty)
    elif prob == problem_types[1]:
        subtraction(difficulty)
    elif prob == problem_types[2]:
        multiplication(difficulty)
    elif prob == problem_types[3]:
        division(difficulty)


def navigate(inp):
    """
    Checks if at any point in time, the user wishes to change the difficulty or the type
    of problem by typing an item from the lists 'difficulties' or 'problem_types'

    Parameters
    ----------
    inp : str
        The previously inputted answer for a problem

    Returns
    -------
    None

    """

    # Difficulty change
    if inp in difficulties:
        global difficulty
        difficulty = inp
        print("\nDifficulty changed to " + inp + ".")
        start()

    # Problem type change
    if inp in problem_types:
        global problem_type
        problem_type = inp
        print("\nProblem type changed to " + inp + ".")
        start()



def start():
    """
    Executes the problems

	Parameters
	----------
	None

    Returns
    -------
    None

    """

    while True:
        ask_type(problem_type)

# Execute code
problem_type = set_type()
difficulty = set_dif()
start()
